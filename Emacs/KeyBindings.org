#+STARTUP: hidestars
#+STARTUP: hideall
#+OPTIONS: H:1 num:t toc:t \n:nil @:t ::t |:t ^:t f:t TeX:t


* Bookmark key bindings
** [f2]     - Cycle bookmark forward
** [S-f2]   - Cycle bookmark previous
** [C-S-f2] - Clear bookmarks
** Built in bookmark support
*** `C-x r m <RET>'
       Set the bookmark for the visited file, at point.
*** `C-x r m BOOKMARK <RET>'
       Set the bookmark named BOOKMARK at point (`bookmark-set').
*** `C-x r b BOOKMARK <RET>'
       Jump to the bookmark named BOOKMARK (`bookmark-jump').
*** `C-x r l'
       List all bookmarks (`list-bookmarks').
*** `M-x bookmark-save'
       Save all the current bookmark values in the default bookmark file.
* Compilation keybindings
** `C-cc` compile
*** Even works for Latex
** `C-cv` recompile
    Shortcut to compile a buffer that has already been compiled at least once
** `C-c.` Go to next error
** `C-c,` Go to previous errors
* Navigational keybindings
** `C-l NUMBER <RET>` Go to line number in buffer
** `C-c C-o` Go to file under cursor
** `M-C-r` Replace text with a regular expression
** `C-x C-r` Recent file
   Opens a buffer with list of recently opened files where you can navigate to
   by pressing enter on a selected file
** `C-xg` Toggle between C/C++ implementation file and header file
** `f5` C++ ebrowse tree mode
** `C-s C-s` Search again for the same string
** `C-s C-w` Search for word under cursor. Press C-w to include more words
** `C-x <SPC> r` Save the position into register 'r'
** `C-x r j r` Jump back to position stored in register 'r'
** `C-x C-r` Open recent opened file history dialog
** `M-p` or `M-n` while in C-x mode to change to previous/next directories from the history
* Formatting
** `C-xx`      Box quote the selection
** `C-xX`      Insert file as a box quoted text
** [M-x align-regexp] - Align region with regex. Ex. ' = '
** [M-x delete-trailing-whitespace] - Removes white spaces
* Editing
** `C-x C-r`   Open Recent file menu
** `C-x M-f`   Find file recursively
** `C-x r x r` Put region in register r
** `C-x r i r` Paste text from register r into buffer at cursor
** `C-c C-k`   Copy line (instead of killing&yanking)
** `C-x r k`   Kill the selected rectangle / column
** `C-x r y`   Yank the selected rectangle / column
** `C-;`       Comment selected region
** `C-:`       Uncomment selected region
** `C-tab`     (PHP) Complete built-in PHP functions
** `C-x 4 f`   find-file-other-window
** `C-xx`      Box quote selected region
** `C-xX`      Box quote insert file
** `M-\`       Expand word dynamically (Like ESC in Textmate)
** [M-x highlight-phrase] - Highlight all occurrences of the phrase
** [M-x whitespace-mode]  - Show invisible characters (tab, space, line feeds)
*** http://xahlee.org/emacs/whitespace-mode.html
** 'C-x C-d'   Open a dired buffer
* Misc
** `C-h b`    Show bound Keybindings
** `C-ct`     Start Pomodoro task
** `C-c C-d`  Insert time and date
** `C-c C-t`  Insert time
** `M-y`      Cycle kill-ring content directly after C-y, otherwise show a popup with kill-ring content
** `C-c d`    Insert date and time in the format of YYYY-MM-DD HH:NN
** `M-!`      Run the shell command and show the output in mini buffer
*** `M-n`     When in M-! mode, provide some default choices
** `M-|`      Run the shell command with the selected region as input data.
** `C-u M-|`  Run the shell command with the selected region as input data. Replace selection with output
** `C-xs`     Open file with sudo privileges
** `C-h`      Backward delete char
** `M-?`      Help
** `C-x n n`  Narrow the region. Display only the selection
** `C-x n w`  Widen the region. Display the full text that were hidden.
** [M-x gs]   Open Git status in current Git repository
*** http://philjackson.github.com/magit/magit.html
** [M-x re-builder] - Interactive Regex builder realtime display
** `C-x ESC ESC` - Repeat last complex command ([M-x command] kind of stuff]
** `C-x z`    Repeat the last command (Move cursor, repeat last character, etc)
*** `z` Repeat last command
** [M-x describe-last-function] - Looks up the previous function and describes it
** `C-x C-+`  Increase the font size
** `C-x C--`  Decrease the font size
** [M-x make-directory] - Creates a directory
** `C-cf`     Open URL at point in system web browser
** `M-$`      Show suggestion for misspelled word
** [shift-mouse-2] - Open URL at mouse  point in system default browser
** [M-x describe-key]   - Gives the key combination of a menu, or describes what is bound to a certain key combination
** [M-x make-directory] - Creates a directory
** [M-x gs]             - Open Git status in current Git repository
*** http://philjackson.github.com/magit/magit.html
** [M-x re-builder]     - Interactive Regex builder realtime display
** [M-x describe-last-function] - Looks up the previous function and describes it
* Latex-mode
** `C-c C-c`     Compile Latex code to PDF
** `C-c C-p C-b` Enable Latex preview in buffer
** `C-c e`       Goto next error
** `M-g n`       Goto next error
** `C-c p`       Goto previous error (Err msg: Not supported)
** `M-g p`       Goto previous error (Err msg: Not supported)
** YA-snippets
*** Look in the menu for current shortcuts
** Tips on realtime Latex
*** Latexmk re-runs pdftex or whatever every time you save your *.tex-file. Instead of preview I do:
**** Open Emacs, C-x C-f => new file, type some skeleton of the
			LaTeX-file including \end{document}, save it (C-x C-s),
			compile it the first time (C-c C-c RET) and open it in the viewer (again C-c C-c RET).
			I open bash, navigate into the folder containing my LaTeX-file and type
			latexmk -pvc -pdf filename.tex
			Then latexmk compiles my document and repeats that each time I save a new version inside Emacs.
			If you employ a pdf-viewer which is able to reload the pdf from
			harddisk every time it changes (Skim)
			you are very close to an instant preview.
**** Problem is when you make a syntax error, the hidden terminal running latexmk will complain, but you will never see it
***** Solution: Make Growl parse the output from latexmk and notify when a syntax error occurs
*** http://stackoverflow.com/questions/738755/dont-make-me-manually-abort-a-latex-compile-when-theres-an-error
*** PDF Preview inside Emacs
*** Split the window vertically
*** Compile the Latex document
*** Open the PDF file in the second buffer
*** Whenever you recompile the Latex code, the PDF buffer will revert to the newly compiled PDF file
* Org-mode
** Links
*** Project planning with org-mode - http://www.contextualdevelopment.com/articles/2008/project-planning
*** Remember work flow - http://orgmode.org/worg/users/rpr.php
*** Wiki: http://www.emacswiki.org/emacs/RememberMode
** `C-c C-x C-c`  Switch to Column view
** `C-c C-s`      Schedule a date
** `C-c r`        (remember-mode) A scratch buffer that is saved for fast jotting of thoughts
*** Can use tags to open a specific remember file (n for notes.org, t for todo.org, etc)
** `C-c !` Add current date
** `C-c <` Add current date
** `C-u C-c C-l`  Insert a file link in the document (TAB completion of path supported)
*** A date buffer must exist
** `C-c C-e A` Export to ASCII buffer, do not create a file.
* ReStructured mode (rst)
** `C-c C-=' Adjust the line in context with ReST syntax
* Remember mode
** Tutorial - http://members.optusnet.com.au/~charles57/GTD/remember.html
** `C-c r`   Switch to remember mode file(s)
** `C-c C-c` Save and close the buffer and go back to previous buffer where you worked
* C++ mode
** `[M-x etags-update-mode]` Enable etags-update-mode for auto update TAGS file when saving
*** From URL: https://github.com/mattkeller/etags-update/blob/master/README.ma
*** (Step -1: Copy Perl script etags-update.pl to a directory in your PATH)
*** Step 0: Start Emacs
*** Step 1: Manually visit-tags-table
*** Step 2: Manually activate the minor-mode 'M-x etags-update-mode'
*** Step 3: Save a file for TAGS file to be updated.
** `[M-x visit-tags-table]` load the pre-generated TAGS file
** `C-ct`    Switch between h/cpp file

** `M-.`     Go to tag under cursor
** `C-u M-.` Go to next tag
** `C-u - M-.` Go to previous tag
** `M-*`     Pop back from tag
** `C-M-.`   Search for symbols that matches the pattern
** `C-c c`   Compile file
** `C-c b`   Smart compile file
** `M-gn`    Jump to next error
** `M-gp`    Jump to previous error
** `C-cf`    Use IDO and TAGS file for opening "project" files
** `C-cy`    Toggle stickiness for buffers (buffers will not be replaced by 'new' buffer)
*** The author talks about Winner mode, where change of buffer positions can be undone
** For following functions 'Semantic mode' must be enabled
*** `C-c C-d d` Parse function and generate a Doxygen comment block of the function signature
*** `C-c C-d f` Fold the Doxygen comment
*** `C-c C-d u` Unfold the Doxygen comment
* Shell mode
** `M-p` - Previous command in history
** `M-n` - Next command in history
** `C-c C-o` - Deletes output of previous command
** `C-c C-r` - Moves back to previous command in window
* Bookmark mode
** `C-x r l` - Open the Bookmark buffer
** `C-x r m` - Add file to Bookmark file
** While in Bookmark buffer
*** d     - Mark for deletion
*** u     - Unmark
*** r     - Rename
*** x     - Delete
*** s     - Save all bookmarks
*** m     - Mark
*** v     - View bookmarked spots ;; "f" also works on a single file
*** t     - Toggle display longlist/shortlist
*** w     - Location of file associated with bookmark
*** DEL   - Remove mark from previous line
*** q     - Exit bookmark list
* Textmate mode
** `M-t` - Go to File
** `M-T` - Go to Symbol
** `M-l` - Go to Line
** `M-L` - Select Line (or expand Selection to select lines)
** `M-;` - Comment Line (or Selection/Region)
** `M-]` - Shift Right (currently indents region)
** `M-[` - Shift Left  (not yet implemented)
** `CM-]` - Align Assignments
** `CM-[` - Indent Line
** `C-Up arrow`   - Column Up
** `C-Down arrow` - Column Down
** `M-RET - Insert Newline at Line's End
** `CM-t - Reset File Cache (for Go to File)
* SpeedBar (File navigation) [sr-toggle-speedbar]
** `U` Go to parent folder
** `+` Unfold item
** `-` Fold item
** `g` Refresh Speedbar
** `n/p` Move to next/Previous item
** `M-n/M-p` Move to next/previous item in confined space
** `b` Switch into Quick Buffer mode (reverts back after one use)
** `f` Switch into File Buffer mode (default)
** `r` Reverts to previous mode
** `Enter` Open folder, open file
** Documentation at http://www.gnu.org/software/emacs/manual/html_node/speedbar/index.html#Top
* General notes
** The single most useful Emacs feature - http://stackoverflow.com/questions/60367/the-single-most-useful-emacs-feature
** Ten essential Emacs tips and tricks  - http://web.psung.name/emacstips/essential.html
** For a more ergonomic Emacs           - http://xahlee.org/emacs/ergonomic_emacs_keybinding.html
** Drawing ascii charts
*** Ditaa
**** Renders an ascii image to full featured graphics file (jpg, png, etc)
*** Artist mode
**** Draw ascii arts with the mouse withing Emacs using a mouse
** IDO Discussion at
			http://www.masteringemacs.org/articles/2010/10/10/introduction-to-ido-mode/
* Projectile
** C-c p f     - Display a list of all files in the project. With a prefix argument it will clear the cache first.
** C-c 4 f     - Jump to a project's file using completion and show it in another window.
** C-c p d     - Display a list of all directories in the project. With aprefix argument it will clear the cache first.
** C-c 4 d     - Switch to a project directory and show it in another window.
** C-c p T     - Display a list of all test files(specs, features, etc) in the project.
** C-c p l     - Display a list of all files in a directory (that's not necessarily a project)
** C-c p g     - Run grep on the files in the project.
** C-c p v     - Run vc-dir on the root directory of the project.
** C-c p b     - Display a list of all project buffers currently open.
** C-c p 4 b   - Switch to a project buffer and show it in another window.
** C-c p 4 C-o - Display a project buffer in another window without selecting it.
** C-c po      - Runs multi-occur on all project buffers currently open.
** C-c p r     - Runs interactive query-replace on all files in the projects.
** C-c p i     - Invalidates the project cache (if existing).
** C-c p R     - Regenerates the projects TAGS file.
** C-c p j     - Find tag in project's TAGS file.
** C-c p k     - Kills all project buffers.
** C-c p D     - Opens the root of the project in dired.
** C-c p e     - Shows a list of recently visited project files.
** C-c p a     - Runs ack on the project. Requires the presence of ack-and-a-half.
** C-c p A     - Runs ag on the project. Requires the presence of ag.el.
** C-c p c     - Runs a standard compilation command for your type of project.
** C-c p p     - Runs a standard test command for your type of project.
** C-c p t     - Toggle between an implementation file and its test file.
** C-c p 4 t   - Jump to implementation or test file in other window.
** C-c p z     - Adds the currently visited file to the cache.
** C-c p s     - Display a list of known projects you can switch to.
** C-c p S     - Save all project buffers.
** C-c p m     - Run the commander (an interface to run commands with a single key).
** C-c p ESC   - Switch to the most recently selected projectile buffer.
** C-c p C-h   - If you ever forget any of Projectile's keybindings just do this
