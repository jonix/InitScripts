
;; This is the configuration load points for the customization of Emacs
;; Make a symbolic link from this file to ~/.emacs
;;
;; To speed up the start time of Emacs, you could byte-compile the .el files
;; in the Plugins directory
;; In a dired buffer of the ~/bin/emacslib
;; directory, mark the .el files with 'M' and then byte-compile them with  'B'.


;; To keep custom variables in their own file
;; via the customize interface (M-x customize*)
(setq custom-file "~/.InitScripts/Emacs/emacs_custom.el")
(load custom-file 'noerror)

(add-to-list 'load-path "~/.InitScripts/Emacs/Plugins")

;; The startup screen is annoying.
(setq inhibit-startup-message t)

;; For disabling pc speaker beeps. Flashes instead
(setq visible-bell t)


;; For using the built-in clipboard provided by the OS
(setq menu-bar-enable-clipboard t)

;; For smooth scrolling
;; (require 'smooth-scrolling)

;; For Delete to delete characters forward instead of backwards
(normal-erase-is-backspace-mode 0)
;; (keyboard-translate ?\C-? ?\C-d)

;; Show time in status bar.
(setq european-calendar-style t)
(display-time)

;; To remove trailing whitespaces
(add-hook 'before-save-hook 'delete-trailing-whitespace)

;; move cursor one line when going past end of page
(setq scroll-step 1)

;; something else that should make scrolling nicer
(setq scroll-conservatively 1)

;; Prevent Emacs from making backup files
(setq make-backup-files nil)

;; Tell Emacs the Tab length
;; For general indentation
;; (setq-default c-basic-offset 4)

;; This might only be necessary on Mac OS X
;; Note: Scrollbars on OS X is relative to the amount of scrolling (bottom of document is a very small scrollbar)
(when window-system
  (mwheel-install))

;; (set-frame-parameter (selected-frame) 'alpha 70)

;; make C-h delete (not Help) in ttys
(global-set-key [?\C-h] 'backward-delete-char)

;;Del will delete forward and Backspace will delete backwards
(normal-erase-is-backspace-mode)

;; Help is now M-? instead of C-h
(global-set-key "\M-\?" 'help-command)


;; === <<< Open files with sudo privs start =========
(defun find-alternative-file-with-sudo ()
  "Open current buffer as root!"
   (interactive)
   (when buffer-file-name
     (find-alternate-file
        (concat "/sudo:root@localhost:"
 	      buffer-file-name))))
 (global-set-key (kbd "C-x C-r") 'find-alternative-file-with-sudo)
;; === <<< Open files with sudo privs end =========


;; === <<< Reindent the copy&pasted code start =======
(defadvice yank (after indent-region activate)
 (when (member major-mode '(c++-mode emacs-lisp-mode python-mode c-mode ruby-mode))
	(unless mark-active
	  (exchange-point-and-mark))
	(indent-region (region-beginning) (region-end) nil)
	(goto-char (region-end))))

;; === >>> Reindent the copy&pasted code end =======


;; Tell Emacs to have a fixed compilation buffers
;; (Special Buffer Frames)
;; (setq special-display-buffer-names
;;	  '("*Completions*" "*grep*" "*tex-shell*"))


;; For easier navigation between multiple visible windows
;; Use meta-arrow keys for simulating CTRL+o
(windmove-default-keybindings 'meta)

;; Let M-x shell show correct colors when working with shell
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)

;; === Start >> To tell Emacs to use a sane Tab&Space policy ===
(setq-default tab-width 4) ; or any other preferred value
(setq cua-auto-tabify-rectangles nil)

(defadvice align (around smart-tabs activate)
  (let ((indent-tabs-mode nil)) ad-do-it))

(defadvice align-regexp (around smart-tabs activate)
  (let ((indent-tabs-mode nil)) ad-do-it))

(defmacro smart-tabs-advice (function offset)
  (defvaralias offset 'tab-width)
  `(defadvice ,function (around smart-tabs activate)
     (if indent-tabs-mode
         (progn
          (save-excursion
             (beginning-of-line)
             (while (looking-at "\t*\\( +\\)\t+")
               (replace-match "" nil nil nil 1)))
           (setq tab-width tab-width)
           (let ((tab-width fill-column)
                 (,offset fill-column))
             ad-do-it))
       ad-do-it)))

;; Sane Tabs for C/C++
(smart-tabs-advice c-indent-line c-basic-offset)
(smart-tabs-advice c-indent-region c-basic-offset)
;; Sane Tabs for Ruby
(smart-tabs-advice ruby-indent-line ruby-indent-level)
(setq ruby-indent-tabs-mode t)
;; Sane Tabs for Perl
(smart-tabs-advice cperl-indent-line cperl-indent-level)
;; Sane Tabs for Javascript
(smart-tabs-advice js2-indent-line js2-basic-offset)
;; Sane Tabs for Python
(smart-tabs-advice python-indent-line-1 python-indent)
(add-hook 'python-mode-hook
		  (lambda ()
			(setq indent-tabs-mode t)
			(setq tab-width (default-value 'tab-width))))


;; === End << To tell Emacs to use a sane Tab&Space policy ===


;; === <<< To make a new script executable when saving start =========
(add-hook 'after-save-hook
        #'(lambda ()
        (and (save-excursion
               (save-restriction
                 (widen)
                 (goto-char (point-min))
                 (save-match-data
                   (looking-at "^#!"))))
             (not (file-executable-p buffer-file-name))
              (shell-command (concat "chmod u+x " (shell-quote-argument buffer-file-name)))             (message
              (concat "Saved as script: " buffer-file-name)))))
;; === >>> To make a new script executable when saving end =========

;; ======= >>> Easy Gnu Privacy Guard (eGPG) ==========
(require 'epa)
(epa-file-enable)
 ;; ====== <<< Easy Gnu Privacy Guard (eGPG) end ==========

;; ====== >>> Recent files support ==========
(require 'recentf) ;; save recently used files
(recentf-mode t)
(setq
   recentf-max-saved-items 100
   recentf-max-menu-items 25
)
(add-hook 'kill-emacs-hook 'recentf-save-list)
;; ====== <<< Recent files end ==========


;; == Start >> C++ IDE setup ==

;; For loading C++/header file counterpart
;; (load-file "~/.InitScripts/Emacs/Plugins/sourcepair.el")
;; (define-key global-map "\C-xg" 'sourcepair-load)

;; For using EBrowse (ctags for C++)
;; (global-set-key [f5] 'ebrowse-tree-mode)
;; (add-to-list 'auto-mode-alist '("BROWSE\\.*" . ebrowse-tree-mode))

;;;; For YASnippet (TextMate like snippets, think "cl+<Tab>" for a full C++ class definition)
(require 'yasnippet) ;; not yasnippet-bundle
(yas/initialize)
(yas/load-directory "~/.InitScripts/Emacs/Plugins/yasnippet/snippets")


;; For IDO (Improved buffer switching, much like TextMate ALT+T fuzzy matching) (Ovverides C-x C-f and C-x b)
(require 'ido)
(ido-mode t)

;; For Git commands
;;(load-file "~/.InitScripts/Emacs/Plugins/sourcepair.el")
;;(require 'magit)
(add-to-list 'load-path "~/.InitScripts/Emacs/Plugins")
(require 'magit)

;; uniquify.el is a helper routine to help give buffer names a better unique name.
(when (load "uniquify" 'NOERROR)
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)
  ; (setq uniquify-buffer-name-style 'post-forward)
)

;; =============== Disabled C++ support start ====================

;; === <<< For CMake mode start =========
(require 'cmake-mode)
(setq auto-mode-alist
      (append '(("CMakeLists\\.txt\\'" . cmake-mode)
                ("\\.cmake\\'" . cmake-mode))
              auto-mode-alist))

;; For CMake - Makes multiple CMake buffer names unique based on the directory name
(defun cmake-rename-buffer ()
	"Renames a CMakeLists.txt buffer to cmake-<directory name>."
	(interactive)
	  ;(print (concat "buffer-filename = " (buffer-file-name)))
	  ;(print (concat "buffer-name     = " (buffer-name)))
	  (when (and (buffer-file-name) (string-match "CMakeLists.txt" (buffer-name)))
	      ;(setq file-name (file-name-nondirectory (buffer-file-name)))
	      (setq parent-dir (file-name-nondirectory (directory-file-name (file-name-directory (buffer-file-name)))))
	      ;(print (concat "parent-dir = " parent-dir))
	      (setq new-buffer-name (concat "cmake-" parent-dir))
	      ;(print (concat "new-buffer-name= " new-buffer-name))
	      (rename-buffer new-buffer-name t)
	      )
	  )
(add-hook 'cmake-mode-hook (function cmake-rename-buffer))

;; === >>>> For CMake mode end =========

;; === <<< For Waf / Scons mode start
(setq auto-mode-alist
     (cons '("wscript" . python-mode) auto-mode-alist))

(setq auto-mode-alist
     (cons '("SConstruct" . python-mode) auto-mode-alist))
(setq auto-mode-alist
     (cons '("SConscript" . python-mode) auto-mode-alist))

;; === >>>> For CMake mode end =========

;;(ede-cpp-root-project "Test"
;;                :name "Test Project"
;;                :file "~/Projects/Work/Mapiton/Native/RenderPig/Source/CommonSource/CMakeLists.txt"
;;                :include-path '("/"
;;                                "/Auxiliary/"
;;                                "/Rendering//"
;;                                "/UIs/"
;;                               )
;;;;                :system-include-path '("~/exp/include")
;;                :spp-table '(("isUnix" . "")
;;                             ("BOOST_TEST_DYN_LINK" . "")))
;;

;;;; Disabled since I am not using Emacs for C++ developing
;; For Cedet (Project management)
;;(load-file "~/.InitScripts/Emacs/Plugins/cedet/common/cedet.el")
;;(global-ede-mode t)
;;(semantic-load-enable-excessive-code-helpers)
;;;(semantic-load-enable-excessive-code-helpers)
;;;(semantic-load-enable-excessive-code-helpers)

;;;; Enable EDE for a pre-existing C++ project
;;;; (ede-cpp-root-project "NAME" :file "~/myproject/Makefile")


;;;; Enabling Semantic (code-parsing, smart completion) features
;;;; Select one of the following:

;; * This enables the database and idle reparse engines
;; (semantic-load-enable-minimum-features)

;; * This enables some tools useful for coding, such as summary mode
;;   imenu support, and the semantic navigator
;; (semantic-load-enable-code-helpers)

;; * This enables even more coding tools such as intellisense mode
;;   decoration mode, and stickyfunc mode (plus regular code helpers)
;;(semantic-load-enable-gaudy-code-helpers)

;; * This enables the use of Exuberent ctags if you have it installed.
;;   If you use C++ templates or boost, you should NOT enable it.
;; (semantic-load-enable-all-exuberent-ctags-support)
;;   Or, use one of these two types of support.
;;   Add support for new languges only via ctags.
;; (semantic-load-enable-primary-exuberent-ctags-support)
;;   Add support for using ctags as a backup parser.
;; (semantic-load-enable-secondary-exuberent-ctags-support)

;; Enable SRecode (Template management) minor-mode.
;; (global-srecode-minor-mode 1)

;; Provide intellisense when typing . on a instance name
;;(defun my-cedet-hook ()
;;  (local-set-key [(control return)] 'semantic-ia-complete-symbol)
;;  (local-set-key "\C-c?" 'semantic-ia-complete-symbol-menu)
;;  (local-set-key "\C-c>" 'semantic-complete-analyze-inline)
;;  (local-set-key "\C-cp" 'semantic-analyze-proto-impl-toggle))
;;(add-hook 'c-mode-common-hook 'my-cedet-hook)

;;(defun my-c-mode-cedet-hook ()
;; (local-set-key "." 'semantic-complete-self-insert)
;; (local-set-key ">" 'semantic-complete-self-insert))
;;(add-hook 'c-mode-common-hook 'my-c-mode-cedet-hook)

;;(require 'semantic-gcc)

;; ==== <<< Cedet end =========

;; =============== Disabled C++ support end ====================

;; === Start >> Setup org-mode TODO actions ===
(setq load-path (cons "~/.InitScripts/Emacs/Plugins/org-mode/lisp" load-path))
(require 'org-install)
(add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(setq org-log-done t)
;; === End << Setup org-mode TODO actions ===

;; ======= >>> Org mode start =======
;; Remember
(org-remember-insinuate)
  (setq org-indent-mode t)
  (setq org-hide-leading-stars t)
  (setq org-directory "~/Documents/GTD/")
  (setq org-default-notes-file (concat org-directory "/notes.org"))

;; ======= <<< Org mode end ===========

;; ==== >>> Add JavaScript support ====
(autoload 'js2-mode "js2" nil t)
(add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
;; ==== <<< Add JavaScript support end ====

;; === >>> Add Latex AUCTex support ====
(load "auctex.el" nil t t)
(load "preview-latex.el" nil t t)
;; == <<< Add Latex AUCTex support end ====

;; === <<< Ruby and .rhtml support start =========
(defun rhtml-modes ()
  (two-mode-mode)
  (rhtml-minor-mode))

(setq auto-mode-alist
      (cons '("\\.rhtml$" . rhtml-modes)
	    auto-mode-alist))
(setq auto-mode-alist
      (cons '("\\.html\\.erb$" . rhtml-modes)
	    auto-mode-alist))


;; For RoR in RubyOnRails (From the RoR official site recommendation)
;; (setq load-path (cons "~/.InitScripts/Emacs/Plugins/emacs-rails" load-path))
;; (require 'rails)

;; === >>> Ruby and .rhtml support end  =========

;; === >>> Complete anything support =====

;; Add company The package to COMP(lete) ANY(thing)
;; (add-to-list 'load-path "~/.InitScripts/Emacs/Plugins/company")
;; (autoload 'company-mode "company" nil t)

;; ==== <<< Complete anything end ====


;;; Loading extracted settings ;;;
(load-file "~/.InitScripts/Emacs/emacs_config_highlighting.el")
(load-file "~/.Initscripts/Emacs/emacs_config_keybindings.el")


